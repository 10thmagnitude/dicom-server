//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Health.Fhir.SqlServer.Features.Schema.Model
{
    internal class VLatest
    {
        internal readonly static SchemaVersionTable SchemaVersion = new SchemaVersionTable();
        internal readonly static SeriesMetadataCoreTable SeriesMetadataCore = new SeriesMetadataCoreTable();
        internal readonly static StudyMetadataCoreTable StudyMetadataCore = new StudyMetadataCoreTable();
        internal readonly static UIDMappingTable UIDMapping = new UIDMappingTable();
        internal readonly static SelectCurrentSchemaVersionProcedure SelectCurrentSchemaVersion = new SelectCurrentSchemaVersionProcedure();
        internal readonly static UpsertSchemaVersionProcedure UpsertSchemaVersion = new UpsertSchemaVersionProcedure();
        internal class SchemaVersionTable : Table
        {
            internal SchemaVersionTable(): base("dicom.SchemaVersion")
            {
            }

            internal readonly IntColumn Version = new IntColumn("Version");
            internal readonly VarCharColumn Status = new VarCharColumn("Status", 10);
        }

        internal class SeriesMetadataCoreTable : Table
        {
            internal SeriesMetadataCoreTable(): base("dicom.SeriesMetadataCore")
            {
            }

            internal readonly BigIntColumn ID = new BigIntColumn("ID");
            internal readonly NVarCharColumn SeriesInstanceUID = new NVarCharColumn("SeriesInstanceUID", 64);
            internal readonly IntColumn Version = new IntColumn("Version");
            internal readonly NullableNVarCharColumn Modality = new NullableNVarCharColumn("Modality", 16);
            internal readonly NullableDateColumn PerformedProcedureStepStartDate = new NullableDateColumn("PerformedProcedureStepStartDate");
        }

        internal class StudyMetadataCoreTable : Table
        {
            internal StudyMetadataCoreTable(): base("dicom.StudyMetadataCore")
            {
            }

            internal readonly BigIntColumn ID = new BigIntColumn("ID");
            internal readonly NVarCharColumn StudyInstanceUID = new NVarCharColumn("StudyInstanceUID", 64);
            internal readonly IntColumn Version = new IntColumn("Version");
            internal readonly NVarCharColumn PatientID = new NVarCharColumn("PatientID", 64);
            internal readonly NullableNVarCharColumn PatientName = new NullableNVarCharColumn("PatientName", 64);
            internal readonly NullableNVarCharColumn ReferringPhysicianName = new NullableNVarCharColumn("ReferringPhysicianName", 64);
            internal readonly NullableDateColumn StudyDate = new NullableDateColumn("StudyDate");
            internal readonly NullableNVarCharColumn StudyDescription = new NullableNVarCharColumn("StudyDescription", 64);
            internal readonly NullableNVarCharColumn AccessionNumer = new NullableNVarCharColumn("AccessionNumer", 16);
        }

        internal class UIDMappingTable : Table
        {
            internal UIDMappingTable(): base("dicom.UIDMapping")
            {
            }

            internal readonly NVarCharColumn StudyInstanceUID = new NVarCharColumn("StudyInstanceUID", 64);
            internal readonly NVarCharColumn SeriesInstanceUID = new NVarCharColumn("SeriesInstanceUID", 64);
            internal readonly NVarCharColumn SOPInstanceUID = new NVarCharColumn("SOPInstanceUID", 64);
            internal readonly BigIntColumn Watermark = new BigIntColumn("Watermark");
            internal readonly TinyIntColumn Status = new TinyIntColumn("Status");
            internal readonly DateTime2Column LastStatusUpdatesDate = new DateTime2Column("LastStatusUpdatesDate", 7);
            internal readonly DateTime2Column CreatedDate = new DateTime2Column("CreatedDate", 7);
        }

        internal class SelectCurrentSchemaVersionProcedure : StoredProcedure
        {
            internal SelectCurrentSchemaVersionProcedure(): base("dicom.SelectCurrentSchemaVersion")
            {
            }

            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dicom.SelectCurrentSchemaVersion";
            }
        }

        internal class UpsertSchemaVersionProcedure : StoredProcedure
        {
            internal UpsertSchemaVersionProcedure(): base("dicom.UpsertSchemaVersion")
            {
            }

            private readonly ParameterDefinition<System.Int32> _version = new ParameterDefinition<System.Int32>("@version", global::System.Data.SqlDbType.Int, false);
            private readonly ParameterDefinition<System.String> _status = new ParameterDefinition<System.String>("@status", global::System.Data.SqlDbType.VarChar, false, 10);
            public void PopulateCommand(global::System.Data.SqlClient.SqlCommand command, System.Int32 version, System.String status)
            {
                command.CommandType = global::System.Data.CommandType.StoredProcedure;
                command.CommandText = "dicom.UpsertSchemaVersion";
                _version.AddParameter(command.Parameters, version);
                _status.AddParameter(command.Parameters, status);
            }
        }
    }
}