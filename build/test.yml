
steps:

  # To run the tests we install NPM to run the 'azurite' emulator (https://github.com/Azure/Azurite).
  # This allows us to test the blob storage providers without an Azure instance.
  - task: NodeTool@0
    displayName: 'Use Node 8.x'
    inputs:
      versionSpec: 8.x
      checkLatest: true
  
  - script: npm install -g azurite@2.7.0
    displayName: 'Install Azurite v2.7.0'
  
  # We start the Azurite as a separate process as the start call is blocking.
  - script: azurite -s &
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux' ))
    displayName: 'Start Azurite Storage Emulator (Linux)'
  
  - script: start azurite -s
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
    displayName: 'Start Azurite Storage Emulator (Windows)'
    
  # Currently the Cosmos DB Emulator only runs on Windows. Therefore all end to end testing
  # is performed on windows.
  - powershell: |
      $cosmosemulator=[Environment]::GetEnvironmentVariable("ProgramFiles") + "\Azure Cosmos DB Emulator\CosmosDB.Emulator.exe"
      & $cosmosemulator /noui
      $location = 'https://localhost:8081/_explorer/index.html'
      $statusCode = [int]0
      while ($statusCode -ne 200)
      {
        Try
        {
          $req = [system.Net.WebRequest]::Create($location)
          $response = $req.GetResponse()
          $statusCode = [int]$response.StatusCode
          $location + " status code: " + $statusCode
          $response.Close()
        } Catch {
          $PSItem.ToString()
        }
      }    
    displayName: 'Start Installed Cosmos Emulator'
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
  
  - task: DotNetCoreCLI@2
    displayName: 'Run all tests (Windows)'
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
    inputs:
      command: test
      projects: '**\*Tests*.csproj'
      arguments: '--configuration $(buildConfiguration)'