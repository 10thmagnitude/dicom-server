{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "appServicePlanResourceGroup": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Resource group containing App Service Plan. If empty, deployment resource group is used."
            }
        },
        "appServicePlanName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of App Service Plan (existing or new). If empty, a name will be generated."
            }
        },
        "appDisplayName": {
            "type": "string",
            "defaultValue": "dicom-server-web-app",
            "metadata": {
                "description": "Name of the App Service Web App which will host the Dicom server."
            }
        },
        "appServicePlanSku": {
            "type": "string",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4"
            ],
            "defaultValue": "S1"
        },
        "serviceName": {
            "type": "string",
            "metadata": {
                "description": "Name of the DICOM service Web App."
            }
        },
        "solutionType": {
            "type": "string",
            "defaultValue": "DicomServerCosmosDB",
            "metadata": {
                "description": "The type of the solution"
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
            ],
            "metadata": {
                "description": "Storage Account type"
            }
        },
        "deployApplicationInsights": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Deploy Application Insights for the DICOM server"
            }
        },
        "applicationInsightsLocation": {
            "type": "string",
            "defaultValue": "eastus",
            "allowedValues": [
                "southeastasia",
                "northeurope",
                "westeurope",
                "eastus",
                "southcentralus",
                "westus2"
            ]
        },
        "dicomStoreBlobContainerName": {
            "type": "string",
            "defaultValue": "dicomwebcontainer",
            "metadata": {
                "description": "The name of the blob store container."
            }
        },
        "dicomMetadataStoreContainerName": {
            "type": "string",
            "defaultValue": "metadatacontainer",
            "metadata": {
                "description": "The name of the metadata store container."
            }
        },
        "cosmosDbAccountConsistencyPolicy": {
            "type": "object",
            "defaultValue": {
                "defaultConsistencyLevel": "Strong"
            },
            "metadata": {
                "description": "An object representing the default consistency policy for the Cosmos DB account. See https://docs.microsoft.com/en-us/azure/templates/microsoft.documentdb/databaseaccounts#ConsistencyPolicy"
            }
        },
        "CosmosThroughput": {
            "type": "int",
            "defaultValue": 400,
            "minValue": 400,
            "maxValue": 1000000,
            "metadata": {
                "description": "The throughput for CosmosDb"
            }           
        },
        "cosmosDbDatabaseId": {
            "type": "string",
            "defaultValue": "health",
            "metadata": {
                "description": "The name of the CosmosDb database."
            }
        },
        "cosmosDbCollectionId": {
            "type": "string",
            "defaultValue": "dicomwebindex",
            "metadata": {
                "description": "The id to use for the CosmosDb collection."
            }
        },
        "repositoryUrl": {
            "type": "string",
            "defaultValue": "https://github.com/Microsoft/dicom-server",
            "metadata": {
                "description": "Respository to pull source code from. Can be a private repository if personal access token is provided in URL. If blank, source code will not be deployed."
            }
        },
        "repositoryBranch": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "Source code branch to deploy."
            }
        }
    },
    "resources": [
        {
            "apiVersion": "2018-02-01",
            "name": "[variables('appServicePlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[resourceGroup().location]",
            "kind": "",
            "tags": {
                "DicomServerSolution": "[parameters('solutionType')]"
            },
            "properties": {
                "name": "[variables('appServicePlanName')]",
                "reserved": false
            },
            "sku": {
                "name": "[parameters('appServicePlanSku')]",
                "Tier": "[parameters('appServicePlanSku')]"
            }
        },
        {
            "apiVersion": "2015-04-08",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[variables('serviceName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": "[parameters('cosmosDbAccountConsistencyPolicy')]",
                "locations": [
                    {
                        "failoverPriority": 0,
                        "locationName": "[resourceGroup().location]"
                    }
                ],
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "ipRangeFilter": "",
                "dependsOn": [],
                "capabilities": []
            },
            "tags": {
                "DicomServerSolution": "[parameters('solutionType')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2016-12-01",
            "location": "[resourceGroup().location]",
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "resources": [ ]
        },
        {
            "apiVersion": "2015-05-01",
            "name": "[variables('appInsightsName')]",
            "type": "Microsoft.Insights/components",
            "location": "[parameters('applicationInsightsLocation')]",
            "condition": "[variables('deployAppInsights')]",
            "kind": "web",
            "tags": {
                "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('serviceName')))]": "Resource",
                "displayName": "AppInsightsComponent",
                "DicomServerSolution": "[parameters('solutionType')]"
            },
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('serviceName')]"
            }
        },
        {
            "name": "[variables('serviceName')]",
            "type": "Microsoft.Web/sites",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "apiVersion": "2015-08-01",
            "dependsOn": [
                "[variables('appServicePlanName')]"
            ],
            "tags": {
                "displayName": "[variables('appDisplayName')]",
                "DicomServerSolution": "[parameters('solutionType')]"
            },
            "properties": {
                "clientAffinityEnabled": false,
                "serverFarmId": "[resourceId(variables('appServicePlanResourceGroup'), 'Microsoft.Web/serverfarms/', variables('appServicePlanName'))]"
            },
            "resources": [
                {
                    "apiVersion": "2015-08-01",
                    "name": "appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[concat('Microsoft.Web/Sites/', variables('serviceName'))]",
                        "[if(variables('deployAppInsights'),concat('Microsoft.Insights/components/', variables('appInsightsName')),resourceId('Microsoft.KeyVault/vaults', variables('serviceName')))]"
                    ],
                    "properties": "[if(variables('deployAppInsights'), union(variables('combinedDicomServerConfigProperties'), json(concat('{\"ApplicationInsights:InstrumentationKey\": \"', reference(concat('Microsoft.Insights/components/', variables('appInsightsName'))).InstrumentationKey, '\"}'))), variables('combinedDicomServerConfigProperties'))]"
                }
                /* When Dicom Server repository is going to be made public, add this section so the code can automatically be pulled from the repository and deployed
                {
                    "apiVersion": "2015-08-01",
                    "name": "web",
                    "type": "sourcecontrols",
                    "condition": "[variables('deploySourceCode')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('serviceName'))]",
                        "[resourceId('Microsoft.Web/Sites/config', variables('serviceName'), 'appsettings')]"
                    ],
                    "properties": {
                        "RepoUrl": "[parameters('repositoryUrl')]",
                        "branch": "[parameters('repositoryBranch')]",
                        "IsManualIntegration": true
                    }
                }
                */
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('serviceName')]",
            "apiVersion": "2015-06-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "DicomServerSolution": "[parameters('solutionType')]"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "tenantId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').tenantId]",
                "accessPolicies": [
                    {
                        "tenantId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').tenantId]",
                        "objectId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').principalId]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list",
                                "set"
                            ]
                        }
                    }
                ],
                "enabledForDeployment": false
            },
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', variables('serviceName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('serviceName'), '/CosmosDb--Host')]",
            "apiVersion": "2015-06-01",
            "properties": {
                "contentType": "text/plain",
                "value": "[reference(concat('Microsoft.DocumentDb/databaseAccounts/', variables('serviceName'))).documentEndpoint]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('serviceName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('serviceName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('serviceName'), '/CosmosDb--Key')]",
            "apiVersion": "2015-06-01",
            "properties": {
                "contentType": "text/plain",
                "value": "[listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('serviceName')), '2015-04-08').primaryMasterKey]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('serviceName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('serviceName'))]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('serviceName'), '/BlobStore--ConnectionString')]",
            "apiVersion": "2015-06-01",
            "properties": {
                "contentType": "text/plain",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('serviceName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        }
    ],
    "variables": {
        "serviceName": "[toLower(parameters('serviceName'))]",
        "appServicePlanName": "[if(empty(parameters('appServicePlanName')),concat(variables('serviceName'),'-asp'),parameters('appServicePlanName'))]",
        "appDisplayName": "[if(empty(parameters('appDisplayName')),concat(variables('serviceName'),'-web'),parameters('appDisplayName'))]",
        "storageAccountName": "[replace(concat(toLower(parameters('serviceName')), 'sa'),'-','')]",
        "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "cosmosAccountid" : "[concat(resourceGroup().id,'/providers/','Microsoft.DocumentDb/databaseAccounts/', variables('serviceName'))]",
        "appServicePlanResourceGroup": "[if(empty(parameters('appServicePlanResourceGroup')), resourceGroup().name, parameters('appServicePlanResourceGroup'))]",
        "deploySourceCode": "[and(not(empty(parameters('repositoryUrl'))),not(empty(parameters('repositoryBranch'))))]",
        "deployAppInsights": "[parameters('deployApplicationInsights')]",
        "appInsightsName": "[concat('AppInsights-', variables('serviceName'))]",
        "identityResourceId": "[concat(resourceId('Microsoft.Web/sites', variables('serviceName')),'/providers/Microsoft.ManagedIdentity/Identities/default')]",
        "keyvaultEndpoint": "[concat('https://', variables('serviceName'), '.vault.azure.net/')]",
        "staticDicomServerConfigProperties": {
            "APPINSIGHTS_PORTALINFO": "ASP.NETCORE",
            "APPINSIGHTS_PROFILERFEATURE_VERSION": "1.0.0",
            "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
            "WEBSITE_NODE_DEFAULT_VERSION": "6.9.4",
            "KeyVault:Endpoint": "[variables('keyvaultEndpoint')]",
            "AllowedHosts": "*",
            "DicomWeb:DicomStore:ContainerName": "[parameters('dicomStoreBlobContainerName')]",
            "DicomWeb:MetadataStore:ContainerName": "[parameters('dicomMetadataStoreContainerName')]",
            "DicomWeb:CosmosDb:CollectionId": "[parameters('cosmosDbCollectionId')]",
            "DicomWeb:CosmosDb:InitialCollectionThroughput": "[parameters('CosmosThroughput')]",
            "BlobStore:RequestOptions:ExponentialRetryBackoffDeltaInSeconds": "4",
            "BlobStore:RequestOptions:ExponentialRetryMaxAttempts": "6",
            "BlobStore:RequestOptions:ServerTimeoutInMinutes": "2",
            "BlobStore:RequestOptions:ParallelOperationThreadCount": "2",
            "CosmosDb:DatabaseId": "[parameters('cosmosDbDatabaseId')]",
            "CosmosDb:ContinuationTokenSizeLimitInKb": "2"
        },
        "emptyDicomServerConfigProperties": {},
        "kuduDicomServerConfigProperties": {
            "PROJECT": "src/Microsoft.Health.Dicom.Web/Microsoft.Health.Dicom.Web.csproj"
         },
        "combinedDicomServerConfigProperties": "[union(variables('staticDicomServerConfigProperties'), if(variables('deploySourceCode'), variables('kuduDicomServerConfigProperties'), variables('emptyDicomServerConfigProperties')))]"
    }
}